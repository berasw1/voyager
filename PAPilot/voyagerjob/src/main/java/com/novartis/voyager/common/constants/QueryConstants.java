
package com.novartis.voyager.common.constants;


public interface QueryConstants {
	
	//The Queries to be implemented in the NodeIdentifier Class for the generation of Sequence Number.
	public static final String GENERATE_SEQUENCE_QUERY="SELECT VOYAGER_SEQ.NEXTVAL FROM DUAL";
	
	public static final String  QCL_JSON_LOG_INSERT_QRY = "INSERT INTO QCL_JSON_LOG(QCL_JSON_LOG_ID, JSON_DATA, UUID, CREATED_DATE) VALUES (QCL_JSON_LOG_SEQ.nextval, ?, ?, ?)";

	public final class VoyagerStriivSqlConstants {
		
		public static final String STRIIV_DEVICE_INSERT_QRY = "INSERT INTO STRIIV_DEVICE (STRIIV_DEVICE_ID, SERIAL_NUMBER) VALUES (STRIIV_DEVICE_SEQ.nextval, ?)";

		public static final String GET_STRIIV_DEVICE_ID_BY_SERIAL_NUMBER = "SELECT STRIIV_DEVICE_ID FROM STRIIV_DEVICE WHERE SERIAL_NUMBER = ?";

		public static final String STRIIV_DEVICE_DETAILS_INSERT_QRY = "INSERT INTO STRIIV_DEVICE_DETAILS ( STRIIV_DEVICE_DETAILS_ID, DECODER_MODEL, BATTERY_LEVEL, BATTERY_LEVEL_UNIT, FIRMWARE_VERSION, "
				+ "HARDWARE_VERSION, CURRENT_TIME_ON_DEVICE, CURRENT_TIME_ON_DEVICE_UNIT, FILE_WRITES_REMAINING, FILE_SPACE_FREE, FILE_SPACE_FREE_UNIT, API_VERSION, "
				+ "SCREEN_ON_COUNT, RESET_COUNT, RADIO_HARDWARE_VERSION, STRIIV_DEVICE_ID, QCL_JSON_LOG_ID) "
				+ "VALUES (STRIIV_DEVICE_DETAILS_SEQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		public static final String STRIIV_RECORD_INSERT_QRY = "INSERT INTO STRIIV_RECORDS (STRIIV_RECORD_ID, PACKET_TYPE, RECORD_DATE, RECORD_DATE_UNIT, IS_CURRENT_LOCAL_DAY, IS_CURRENT_DAY, STRIIV_DEVICE_DETAILS_ID) "
				+ " VALUES (STRIIV_RECORDS_SEQ.nextval, ?, ?, ?, ?, ?, ?)";

		public static final String STRIIV_ACTIVITY_INSERT_QRY = "INSERT INTO STRIIV_ACTIVITY ( STRIIV_ACTIVITY_ID, START_TIME, START_TIME_UNIT, INTERVAL, INTERVAL_UNIT, "
				+ " RUN, WALK, DISTANCE, DISTANCE_UNIT, CALORIES_BURNED, CALORIES_BURNED_UNIT, TOTAL_ACTIVITY_TIME, TOTAL_ACTIVITY_TIME_UNIT, STRIIV_RECORD_ID, IS_DUPLICATE )"
				+ "VALUES (STRIIV_ACTIVITY_SEQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

		public static final String STRIIV_QCL_BTLE_PACKET_INSERT_QRY = "INSERT INTO STRIIV_QCL_BTLE_PACKET (STRIIV_QCL_BTLE_PACKET_ID, UUID, UUID_DESCRIPTION, BTLE_PACKET_ID, UUID_TYPE, "
				+ "BTLE_PACKET_HEADER_LENGTH, OFFSET, PACKET_TYPE, VERSION, STRIIV_DEVICE_DETAILS_ID) VALUES (STRIIV_QCL_BTLE_PACKET_SEQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		public static final String STRIIV_TWONET_PROPERTIES_INSERT_QRY = "INSERT INTO STRIIV_TWONET_PROPERTIES (STRIIV_TWONET_PROPERTIES_ID, AIR_INTERFACE_TYPE, CDE_VERSION, CUSTOMER_ID, "
				+ "CUSTOMER_NAME, DEVICE_ADDRESS, DEVICE_DATA, DEVICE_MODEL, DEVICE_SERIAL_NUMBER, DEVICE_TYPE, HUB_ID, HUB_RECEIVE_TIME_OFFSET, TWONET_ID, TIME_ZONE, "
				+ "HUB_RECEIVE_TIME, SP_RECEIVE_TIME, EXPORTER_VERSION, STRIIV_DEVICE_DETAILS_ID,DECODER_VERSION) "
				+ "VALUES (STRIIV_TWONET_PROPERTIES_SEQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";

		public static final String STRIIV_CHECK_ACTIVITY_BY_SERIAL_NUMBER_AND_START_TIME = "SELECT COUNT(*) FROM striiv_device sDevice INNER JOIN striiv_device_details sDeviceDetails ON sDevice.striiv_DEVICE_ID = sDeviceDetails.striiv_DEVICE_ID "
				+ "INNER JOIN striiv_records sRecords ON  sDeviceDetails.striiv_DEVICE_DETAILS_ID = sRecords.striiv_DEVICE_DETAILS_ID "
				+ "INNER JOIN striiv_activity sActivity ON sActivity.striiv_RECORD_ID = sRecords.striiv_RECORD_ID "
				+ "WHERE  sDevice.SERIAL_NUMBER = ? AND sActivity.START_TIME = ?";
		
	}
	
	
	public final class VoyagerActivGraphSqlConstants {
		
		public static final String ACTIGRAPH_DEVICE_INSERT_QRY = "INSERT INTO ACTIGRAPH_DEVICE (ACTIGRAPH_DEVICE_ID, SERIAL_NUMBER) VALUES (ACTIGRAPH_DEVICE_SEQ.nextval, ?)";
		
		public static final String GET_ACTIGRAPH_DEVICE_ID_BY_SERIAL_NUMBER = "SELECT ACTIGRAPH_DEVICE_ID FROM ACTIGRAPH_DEVICE WHERE SERIAL_NUMBER = ?";
		
		public static final String ACTIGRAPH_DEVICE_DETAILS_INSERT_QRY = "INSERT INTO ACTIGRAPH_DEVICE_DETAILS ( ACTIGRAPH_DEVICE_DETAILS_ID, CURRENT_TIME_ON_DEVICE, CURRENT_TIME_ON_DEVICE_UNIT, TIME_OFFSET_FROM_GMT, "
				+ "TIME_OFFSET_FROM_GMT_UNIT, HARD_FAULT_RESETS, WATCHDOG_RESETS, UNEXPECTED_RESETS, HALT_STATE, HALT_STATE_DESC, ERROR_STATE, ERROR_STATE_DESC, DEVICE_STATE, DEVICE_STATE_DESC, BATTERY_STATE, BATTERY_STATE_DESC,"
				+ "SAMPLE_RATE, SAMPLE_RATE_UNIT, BATTERY_LEVEL, BATTERY_LEVEL_UNIT, DECODER_MODEL, FIRMWARE_BUILD_VERSION, FIRMWARE_MINOR_REVISION, FIRMWARE_MAJOR_REVISION, ACTIGRAPH_DEVICE_ID, QCL_JSON_LOG_ID) "
				+ "VALUES (ACTIGRAPH_DEVICE_DETAILS_SEQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		
		public static final String ACTIGRAPH_RECORD_INSERT_QRY = "INSERT INTO ACTIGRAPH_RECORDS (ACTIGRAPH_RECORD_ID, PACKET_TYPE, RECORD_DATE, RECORD_DATE_UNIT, IS_CURRENT_LOCAL_DAY, ACTIGRAPH_DEVICE_DETAILS_ID) "
				+ " VALUES (ACTIGRAPH_RECORDS_SEQ.nextval, ?, ?, ?, ?, ?)";

		public static final String ACTIGRAPH_ACTIVITY_INSERT_QRY = "INSERT INTO ACTIGRAPH_ACTIVITY ( ACTIGRAPH_ACTIVITY_ID, START_TIME, START_TIME_UNIT, INTERVAL, INTERVAL_UNIT, "
				+ " STEPS, WEAR_DETECTION, WEAR_DETECTION_DESC, X, Y, Z, ACTIGRAPH_RECORD_ID,CALORIES_BURNED,CALORIES_BURNED_UNIT, IS_DUPLICATE )"
				+ "VALUES (ACTIGRAPH_ACTIVITY_SEQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?, ?, ?)";

		public static final String ACTIGRAPH_QCL_BTLE_PACKET_INSERT_QRY = "INSERT INTO ACTIGRAPH_QCL_BTLE_PACKET (ACTIGRAPH_QCL_BTLE_PACKET_ID, UUID, UUID_DESCRIPTION, BTLE_PACKET_ID, UUID_TYPE, "
				+ "BTLE_PACKET_HEADER_LENGTH, OFFSET, PACKET_TYPE, VERSION, ACTIGRAPH_DEVICE_DETAILS_ID) VALUES (ACTIGRAPH_QCL_BTLE_PACKET_SEQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		public static final String ACTIGRAPH_TWONET_PROPERTIES_INSERT_QRY = "INSERT INTO ACTIGRAPH_TWONET_PROPERTIES (ACTIGRAPH_TWONET_PROPERTIES_ID, AIR_INTERFACE_TYPE, CDE_VERSION, CUSTOMER_ID,"
				+ "CUSTOMER_NAME, DEVICE_ADDRESS, DEVICE_DATA, DEVICE_MODEL, DEVICE_SERIAL_NUMBER, DEVICE_TYPE, HUB_ID, HUB_RECEIVE_TIME_OFFSET, TWONET_ID, TIME_ZONE,"
				+ "HUB_RECEIVE_TIME, SP_RECEIVE_TIME, EXPORTER_VERSION, ACTIGRAPH_DEVICE_DETAILS_ID, DECODER_VERSION) "
				+ "VALUES (ACTIGRAPH_TWONET_PROP_SEQ.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		public static final String ACTIGRAPH_CHECK_ACTIVITY_BY_SERIAL_NUMBER_AND_START_TIME = "SELECT COUNT(*)  FROM actigraph_device aDevice INNER JOIN actigraph_device_details aDeviceDetails ON aDevice.ACTIGRAPH_DEVICE_ID = aDeviceDetails.ACTIGRAPH_DEVICE_ID "
				+ "INNER JOIN actigraph_records aRecords ON  aDeviceDetails.ACTIGRAPH_DEVICE_DETAILS_ID = aRecords.ACTIGRAPH_DEVICE_DETAILS_ID "
				+ "INNER JOIN actigraph_activity aActivity ON aActivity.ACTIGRAPH_RECORD_ID = aRecords.ACTIGRAPH_RECORD_ID "
				+ "WHERE  aDevice.SERIAL_NUMBER = ? AND aActivity.START_TIME = ?";
		
	}
}
